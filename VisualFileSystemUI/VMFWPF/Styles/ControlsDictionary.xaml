<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vn ="clr-namespace:VMFWPF.Model"
                    xmlns:ss="clr-namespace:VMFWPF.Selecters"
                    xmlns:ie="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:local="clr-namespace:VMFWPF.Styles">
    <!--//////////////////////////////控制按钮///////////////////////////-->

    <Style x:Key="IconText" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource IconForeground}"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="FontWeight" Value="UltraBlack"></Setter>
        <Setter Property="TextAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
    </Style>

    <Style x:Key="IconButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource IconForeground}"></Setter>
        <Setter Property="Margin" Value="2"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Margin="{TemplateBinding Margin}"
                        >
                        <TextBlock Style="{StaticResource IconText}" Width="24"
                                   Margin="{TemplateBinding Padding}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Text="{TemplateBinding Content}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"></TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource OverBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="White"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EmptyButton" TargetType="Button" BasedOn="{StaticResource IconButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border  Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Margin="{TemplateBinding Margin}"
                        >
                        <ContentPresenter 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            ></ContentPresenter>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomSeparator" TargetType="Separator">
        <Setter Property="Background" Value="LightBlue"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"></Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="MenuItem">
        <Setter Property="Background" Value="#FF2D2D30"></Setter>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid Background="{Binding Background, RelativeSource={RelativeSource AncestorType=Window}}">
                        <Grid Name="Grid_content" VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="24"/>
                                <ColumnDefinition/>
                                <ColumnDefinition MinWidth="24"/>
                                <ColumnDefinition MinWidth="8"/>
                            </Grid.ColumnDefinitions>
                            
                            <ContentPresenter Grid.Column="0" ContentSource="Icon" />
                            <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <ContentPresenter Grid.Column="2" ContentSource="InputGestureText"/>
                            
                            <TextBlock Name="sub_icon" Grid.Column="3" 
                                       RenderTransformOrigin="0.5,0.5" FontSize="8" 
                                       Visibility="Hidden"
                                       TextAlignment="Center" 
                                       VerticalAlignment="Center" 
                                       HorizontalAlignment="Right"
                                       Style="{StaticResource IconText}" Text="{StaticResource Expanded}">
                                <TextBlock.RenderTransform>
                                    <RotateTransform Angle="-90"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Grid>
                        <Popup Name="Pop_Panel" 
                               AllowsTransparency="True"
                               IsOpen="{Binding IsSubmenuOpen,RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                               Placement="Right">
                            <Border Margin="8"
                                    BorderBrush="#0F696969"
                                    BorderThickness="1"
                                Background="{Binding Background,RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black" BlurRadius="4" Direction="-45" ShadowDepth="4" Opacity="0.8"/>
                                </Border.Effect>
                                <StackPanel IsItemsHost="True"></StackPanel>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" >
                            <Setter Property="Background" Value="{DynamicResource OverBrush}" TargetName="Grid_content"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="DarkGray" TargetName="Grid_content"/>
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelHeader"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Placement" Value="Bottom" TargetName="Pop_Panel"/>
                        </MultiTrigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelItem"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="sub_icon"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="Pop_Panel"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="SubmenuHeader"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="sub_icon"/>
                            <Setter Property="Placement" Value="Right" TargetName="Pop_Panel"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="SubmenuItem"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Placement" Value="Right" TargetName="Pop_Panel"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Margin="{TemplateBinding Margin}"
                        >
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"></ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border Name="Border" BorderThickness="1"
                            Margin="{TemplateBinding Margin}">
                        <Border.Effect>
                            <DropShadowEffect Color="Black" Opacity="0.8" BlurRadius="4" Direction="-45" ShadowDepth="4"/>
                        </Border.Effect>
                        <StackPanel IsItemsHost="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--////////////////////////////////////MainList//////////////////////////////////////////////-->
    
    <DataTemplate x:Key="FileNodeMainListDataStyle"  DataType="{x:Type vn:VMNode}">
        <Grid Background="Transparent" ToolTip="{Binding Name}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <!--<TextBlock FontFamily="{StaticResource iconfont}" Text="{StaticResource FlatIconMain}" FontSize="80" Foreground="#FF3A87FB" TextAlignment="Center"/>-->
            <TextBlock FontFamily="{StaticResource iconfont}" 
                       Text="{StaticResource FlatIconMain}"
                       FontSize="{Binding Converter={StaticResource IconLevelToWidth},ConverterParameter=2}" TextAlignment="Center">
                <TextBlock.Foreground>
                    <RadialGradientBrush Center="0.5,1" RadiusX="1.6" RadiusY="1" GradientOrigin="0.5,1">
                        <GradientStop Color="{Binding Type,Converter={StaticResource FileTypeToColor},ConverterParameter=Light}" Offset="0"></GradientStop>
                        
                        <GradientStop Color="{Binding Type,Converter={StaticResource FileTypeToColor},ConverterParameter=Dark}" Offset="1" ></GradientStop>
                    </RadialGradientBrush>
                </TextBlock.Foreground>
            </TextBlock>


            <TextBlock FontFamily="{StaticResource iconfont}" Text="{StaticResource FlatIconTitle}" 
                       FontSize="{Binding Converter={StaticResource IconLevelToWidth},ConverterParameter=2}"  
                       Foreground="{Binding Type,Converter={StaticResource FileTypeToColor},ConverterParameter=LightBrush}" TextAlignment="Center">
                <TextBlock.Effect>
                    <DropShadowEffect Color="{Binding Type,Converter={StaticResource FileTypeToColor},ConverterParameter=Dark}" BlurRadius="1" Opacity="0.5" ShadowDepth="0" Direction="0"></DropShadowEffect>
                </TextBlock.Effect>
            </TextBlock>
            <TextBlock FontFamily="{StaticResource iconfont}" Text="{StaticResource FlatIconShadow}" 
                       FontSize="{Binding Converter={StaticResource IconLevelToWidth},ConverterParameter=2}"
                       TextAlignment="Center">
                <TextBlock.Foreground>
                    <LinearGradientBrush StartPoint="1,0.0" EndPoint="1,0.25">
                        <GradientStop Color="#99000000" Offset="0"></GradientStop>
                        <GradientStop Color="#00000000" Offset="1"></GradientStop>
                    </LinearGradientBrush>
                </TextBlock.Foreground>
            </TextBlock>
            
            <TextBlock Text="{Binding Type,Converter={StaticResource FileTypeTextConvert}}" TextAlignment="Center" Margin="5,8" Background="Transparent"
                       HorizontalAlignment="Stretch"  VerticalAlignment="Bottom" FontSize="14"
                       Foreground="White" FontWeight="ExtraBlack">
                <TextBlock.Effect>
                    <DropShadowEffect Color="Black" BlurRadius="1" Direction="-90" ShadowDepth="1" Opacity="0.6"></DropShadowEffect>
                </TextBlock.Effect>
            </TextBlock>

            <TextBlock Grid.Row="1" 
                       TextWrapping="Wrap" 
                       TextTrimming="CharacterEllipsis"
                       Width ="120" MaxHeight ="100"
                       TextAlignment="Center"
                       Text="{Binding Name}"
                       Foreground="{DynamicResource IconForeground}"
                       VerticalAlignment="Top"
                       HorizontalAlignment="Center"></TextBlock>
        </Grid>
    </DataTemplate>
    
    <DataTemplate x:Key="NodeMainListDataStyle" DataType="{x:Type vn:VMNode}">
        <Border>
            <Grid Margin="{TemplateBinding Margin}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Image VerticalAlignment="Center" HorizontalAlignment="Center" 
                       Width="{Binding Converter={StaticResource IconLevelToWidth},ConverterParameter=2}"
                       Source="{Binding Converter={StaticResource StringTypeToIconConvert},ConverterParameter=2,FallbackValue={StaticResource DefaluteIcon}}"
                       
                       ></Image>

                <TextBlock Name="Disk_Active"
                                       Style="{StaticResource  IconText}" 
                                       Text="{StaticResource ActiveDiskBar}"
                                       FontSize="{Binding Converter={StaticResource IconLevelToWidth},ConverterParameter=2}"
                                       SnapsToDevicePixels="True"
                                       VerticalAlignment="Stretch"
                                       Foreground="LightBlue"
                                       Visibility="Hidden"
                                       >
                    <TextBlock.Effect>
                        <DropShadowEffect Color="Blue" BlurRadius="4" Direction="0" ShadowDepth="0" Opacity="0.6"></DropShadowEffect>
                    </TextBlock.Effect>
                </TextBlock>

                <TextBlock Text="{Binding AccessTime,Converter={StaticResource DriveIndexConvert}}"
                           Visibility="{Binding Type,Converter={StaticResource BoolToVisibility},ConverterParameter=Disk}"
                           VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,0"
                           FontSize="28" FontWeight="ExtraBold">
                    <TextBlock.Effect>
                        <DropShadowEffect Color="Blue" BlurRadius="4" Direction="0" ShadowDepth="0" Opacity="0.8"/>
                    </TextBlock.Effect>
                </TextBlock>

                <TextBlock Name="Display_Box" Grid.Row="1" 
                           Foreground="{DynamicResource IconForeground}"
                           Text="{Binding Name}" 
                           ToolTip="{Binding Name}" 
                           VerticalAlignment="Stretch" 
                           HorizontalAlignment="Center"
                           Width ="100" MaxHeight ="100"
                           TextAlignment="Center"
                           TextWrapping="Wrap"
                           TextTrimming="CharacterEllipsis"
                           >
                </TextBlock>
                
                <TextBox Name="Edit_Box" Grid.Row="1" 
                         TextWrapping="Wrap" 
                         Focusable="True"
                         VerticalScrollBarVisibility="Auto"
                         VerticalAlignment="Stretch" 
                         HorizontalAlignment="Stretch"
                         Width ="100" MaxHeight ="100"
                         TextAlignment="Center"
                         Text="{Binding Name}"  >
                    <TextBox.Visibility>
                        <MultiBinding Converter="{StaticResource ModifyConvert}">
                            <Binding Path="IsSelected"></Binding>
                            <Binding Path="ModifyMode"></Binding> 
                        </MultiBinding>
                    </TextBox.Visibility>
                    <!--<i:Interaction.Triggers>
                        <i:EventTrigger EventName="LostKeyboardFocus">
                            <i:InvokeCommandAction Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=Window}}" 
                                                  >
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                        <Binding Source="Rename"/>
                                        <Binding />
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>-->

                </TextBox>
            </Grid>
            
        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
                <Setter Property="Visibility" Value="{Binding Type,Converter={StaticResource BoolToVisibility},ConverterParameter=Disk}" TargetName="Disk_Active"></Setter>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="MainListItemStyle" TargetType="ListViewItem">
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Margin" Value="2"></Setter>
        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            >
                        <ContentPresenter Margin="0" />

                        <Border.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick" 
                                          Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=Window}}" >
                                <MouseBinding.CommandParameter>
                                    <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                        <Binding Source="Enter"></Binding>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ListViewItem}"></Binding>
                                    </MultiBinding>
                                </MouseBinding.CommandParameter>
                                
                            </MouseBinding>
                        </Border.InputBindings>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource IconForeground}"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#F0236393"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                
            </Setter.Value>

        </Setter>
            <Setter Property="ContextMenu">
               <Setter.Value>
                <ContextMenu 
                    BorderThickness="0"
                    Background="{DynamicResource IconBackground}"
                    Foreground="{DynamicResource IconForeground}"
                    Tag="{Binding PlacementTarget.DataContext,RelativeSource={RelativeSource Mode=Self}}" 
                    DataContext="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource Mode=Self}}">
                    
                    <MenuItem Header="剪切" Visibility="Collapsed"></MenuItem>
                    <MenuItem Header="复制" Visibility="Collapsed"></MenuItem>
                    <MenuItem Header="粘贴" Visibility="Collapsed"></MenuItem>
                    
                    <Separator  Visibility="Collapsed" Style="{DynamicResource CustomSeparator}"></Separator>
                    <MenuItem Header="导出此项到..." Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                <Binding Source="Export"></Binding>
                                <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=ContextMenu}"/>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <MenuItem Header="导入...到此项">
                        <MenuItem Header="文件" Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                            <MenuItem.CommandParameter>
                                <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                    <Binding Source="Inport"></Binding>
                                    <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=ContextMenu}"/>
                                </MultiBinding>
                            </MenuItem.CommandParameter>                            
                        </MenuItem>
                        <MenuItem Header="文件夹" Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                            <MenuItem.CommandParameter>
                                <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                    <Binding Source="InportFloders"></Binding>
                                    <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=ContextMenu}"/>
                                </MultiBinding>
                            </MenuItem.CommandParameter>
                        </MenuItem>
                    </MenuItem>
                    <Separator  Style="{DynamicResource CustomSeparator}"></Separator>
                    <MenuItem Header="重命名" Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                <Binding Source="Rename"></Binding>
                                <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=ContextMenu}"/>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <Separator Style="{DynamicResource CustomSeparator}"/>
                    <MenuItem Header="删除" Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                <Binding Source="Delete"></Binding>
                                <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=ContextMenu}"/>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    
                    </ContextMenu>
                </Setter.Value>
            </Setter>
    </Style>

    <Style x:Key="MainListStyle_" TargetType="ListView">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel></WrapPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu 
                    BorderThickness="0"
                    Background="{DynamicResource IconBackground}"
                    Foreground="{DynamicResource IconForeground}"
                    DataContext="{Binding PlacementTarget.DataContext,RelativeSource={RelativeSource Mode=Self}}"
                    Tag="{Binding PlacementTarget.DataContext,RelativeSource={RelativeSource Mode=Self}}">
                    <MenuItem Header="新建分区" 
                              Command="{Binding Tag.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              CommandParameter="NewPartition">
                    </MenuItem>
                    <MenuItem Header="新建文件夹" 
                              Command="{Binding Tag.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              CommandParameter="NewFloder">
                    </MenuItem>
                    <Separator Style="{StaticResource CustomSeparator}" />
                    <MenuItem Header="导入">
                        <MenuItem Header="文件"
                                  Command="{Binding Tag.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="Inport"></MenuItem>
                        <MenuItem Header="文件夹"
                                  Command="{Binding Tag.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="InportFloders"></MenuItem>
                    </MenuItem>
                    <MenuItem Header="导出当前所有" 
                              Command="{Binding Tag.NodeCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              CommandParameter="Export"></MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <ss:MainListItemSelecter x:Key="MainListItemSelecter" FileTypeTemplate="{StaticResource FileNodeMainListDataStyle}" OtherTypeTemplate="{StaticResource NodeMainListDataStyle}"></ss:MainListItemSelecter>
   
    <!--///////////////////////////SideList///////////////////////////////////-->
    
    <Style x:Key="TreeToggleButton" TargetType="ToggleButton">
        <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource IconForeground}"></Setter>
        <Setter Property="Content" Value="{StaticResource UnExpanded}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <TextBlock Name="Icon" 
                                   FontFamily="{StaticResource iconfont}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" 
                                   RenderTransformOrigin="0.5,0.5"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"></TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Content" Value="{StaticResource Expanded}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <HierarchicalDataTemplate x:Key="SideListDataStyle" DataType="{x:Type vn:VMNode}" ItemsSource="{Binding Children}">
        <Border>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Image Height="24"  Source="{Binding Converter={StaticResource StringTypeToIconConvert},ConverterParameter=0,FallbackValue={StaticResource DefaluteSmallIcon}}"></Image>
                <TextBlock Text="{Binding Name}" Grid.Column="1" VerticalAlignment="Center" Margin="4,0"></TextBlock>
            </Grid>
        </Border>
    </HierarchicalDataTemplate>

    <Style x:Key="SideListItemStyle" TargetType="TreeViewItem">
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource IconForeground}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    
                        <StackPanel Orientation="Vertical" Visibility="{Binding DataContext,RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource DisplayFloderOnly}}">
                            <Border Name="Margin_Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    >
                                <Grid Name="Margin_Grid" 
                                      HorizontalAlignment="Stretch"
                                      Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TreeViewMargin}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        <ColumnDefinition></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton Name="Expander" 
                                                  Style="{StaticResource TreeToggleButton}"  
                                                  Width="24"
                                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=Window}}">
                                    <ToggleButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                            <Binding Source="PreLoad"/>
                                            <Binding />
                                        </MultiBinding>
                                    </ToggleButton.CommandParameter>
                                    </ToggleButton>
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" 
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"></ContentPresenter>
                                </Grid>                                
                            </Border>

                            <ItemsPresenter Name="Childrens"></ItemsPresenter>
                        </StackPanel>
                    
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Childrens"></Setter>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Childrens"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Margin_Border">
                            <Setter Property="Background" Value="{DynamicResource OverBrush}" TargetName="Margin_Border"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectedBrush}" TargetName="Margin_Border"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"></Condition>
                                <Condition Property="IsSelected" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource OverBrush}" TargetName="Margin_Border"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--///////////////////////////HistoryList//////////////////////////-->

    <DataTemplate x:Key="HistoryListDataStyle" DataType="{x:Type vn:VMNode}">
        <Border>
            <StackPanel Orientation="Horizontal">
                <Image Height="24" Margin="2,1"
                       Source="{Binding Converter={StaticResource StringTypeToIconConvert},ConverterParameter=0}"></Image>
                <TextBlock Text="{Binding Name}" Background="Transparent" VerticalAlignment="Center"></TextBlock>
                
            </StackPanel>
        </Border>

    </DataTemplate>

    <Style x:Key="HistoryListItemStyle" TargetType="ListBoxItem">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Margin="{TemplateBinding Margin}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ></ContentPresenter>
                        <!--<Border.InputBindings>
                            <MouseBinding MouseAction="LeftClick" Command="{Binding DataContext.NodeCommand,RelativeSource={RelativeSource AncestorType=Window}}">
                                <MouseBinding.CommandParameter>
                                    <MultiBinding Converter="{StaticResource DoNothingMultiConvert}">
                                        <Binding Source="Goto"/>
                                        <Binding />
                                    </MultiBinding>
                                </MouseBinding.CommandParameter>
                            </MouseBinding>
                        </Border.InputBindings>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource OverBrush}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HistoryListStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border>
                        <ItemsPresenter></ItemsPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>